{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from \"izitoast\";\r\nimport \"izitoast/dist/css/iziToast.min.css\";\r\n\r\nconst form = document.querySelector(\".form\");\r\n\r\nform.addEventListener(\"submit\", handleSubmit);\r\n\r\nfunction handleSubmit(event) {\r\n    event.preventDefault(); \r\n\r\n    const delay = Number(event.target.elements.delay.value); \r\n    const shouldResolve = event.target.elements.state.value === \"fulfilled\"; \r\n\r\n    new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (shouldResolve) {\r\n                resolve(delay);\r\n            } else {\r\n                reject(delay);\r\n            }\r\n        }, delay);\r\n    })\r\n    .then((delay) => {\r\n        iziToast.success({\r\n            title: \"Ok\",\r\n            message: `Fulfilled promise in ${delay}ms`,\r\n            position: \"topRight\",\r\n            class: \"icon-svg-success\",\r\n            iconUrl: \"/img/success.svg\", \r\n            backgroundColor: \"#59a10d\",\r\n            titleColor: \"#fff\",\r\n            messageColor: \"#fff\",\r\n        });\r\n    })\r\n    .catch((delay) => {\r\n        iziToast.error({\r\n            title: \"Error\",\r\n            message: `Rejected promise in ${delay}ms`,\r\n            position: \"topRight\",\r\n            class: \"icon-svg-error\",\r\n            backgroundColor: \"#ef4040\",\r\n            titleColor: \"#fff\",\r\n            messageColor: \"#fff\",\r\n            iconUrl: \"/img/error.svg\",\r\n            \r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Напиши скрипт, який після сабміту форми створює проміс. \r\n// В середині колбека цього промісу через вказану користувачем кількість \r\n// мілісекунд проміс має виконуватися (при fulfilled) або \r\n// відхилятися (при rejected), залежно від обраної опції в радіокнопках. \r\n// Значенням промісу, яке передається як аргумент у методи resolve/reject, \r\n// має бути значення затримки в мілісекундах.\r\n\r\n// Створений проміс треба опрацювати у відповідних для вдалого/невдалого \r\n// виконання методах.\r\n\r\n// Якщо проміс виконується вдало, виводь у консоль наступний рядок, де\r\n//  delay — це значення затримки виклику промісу в мілісекундах.\r\n\r\n//  `✅ Fulfilled promise in ${delay}ms`\r\n\r\n\r\n// Якщо проміс буде відхилено, то виводь у консоль наступний рядок, \r\n// де delay — це значення затримки промісу в мілісекундах.\r\n\r\n// `❌ Rejected promise in ${delay}ms`\r\n\r\n\r\n\r\n// Бібліотека повідомлень\r\n\r\n\r\n\r\n// Для відображення повідомлень, замість console.log(), використовуй \r\n// бібліотеку iziToast. Для того щоб підключити CSS код бібліотеки в \r\n// проєкт, необхідно додати ще один імпорт, крім того, що описаний у документації.\r\n\r\n"],"names":["form","handleSubmit","event","delay","shouldResolve","resolve","reject","iziToast"],"mappings":"wIAGA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAE3CA,EAAK,iBAAiB,SAAUC,CAAY,EAE5C,SAASA,EAAaC,EAAO,CACzBA,EAAM,eAAc,EAEpB,MAAMC,EAAQ,OAAOD,EAAM,OAAO,SAAS,MAAM,KAAK,EAChDE,EAAgBF,EAAM,OAAO,SAAS,MAAM,QAAU,YAE5D,IAAI,QAAQ,CAACG,EAASC,IAAW,CAC7B,WAAW,IAAM,CACTF,EACAC,EAAQF,CAAK,EAEbG,EAAOH,CAAK,CAEnB,EAAEA,CAAK,CAChB,CAAK,EACA,KAAMA,GAAU,CACbI,EAAS,QAAQ,CACb,MAAO,KACP,QAAS,wBAAwBJ,CAAK,KACtC,SAAU,WACV,MAAO,mBACP,QAAS,mBACT,gBAAiB,UACjB,WAAY,OACZ,aAAc,MAC1B,CAAS,CACT,CAAK,EACA,MAAOA,GAAU,CACdI,EAAS,MAAM,CACX,MAAO,QACP,QAAS,uBAAuBJ,CAAK,KACrC,SAAU,WACV,MAAO,iBACP,gBAAiB,UACjB,WAAY,OACZ,aAAc,OACd,QAAS,gBAErB,CAAS,CACT,CAAK,CACL"}